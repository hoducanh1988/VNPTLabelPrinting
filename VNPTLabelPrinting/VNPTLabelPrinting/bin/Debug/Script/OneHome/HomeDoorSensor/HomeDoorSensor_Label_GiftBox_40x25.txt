/*
Version=000000000U0001
BuildTime=08/01/2021 17:15
Copyright=Copyright of VNPT Technology 2021
Product=HOME DOOR SENSOR
Station=IN TEM GIFTBOX SẢN PHẨM HOME DOOR SENSOR - ONE HOME
About={
Version=000000000U0001;Content=- Xây dựng phần mềm in tem đáy one home - home door sensor;Date=08/01/2021;Type=Tạo mới;Person=Hồ Đức Anh
}
*/

using System;
using System.Text;
using System.Net.NetworkInformation;
using System.Threading;
using System.Text.RegularExpressions;
using System.Linq;
using System.Collections.Generic;
using Automation;

namespace ONEHOME {

    public class HomeDoorSensor_LabelGiftBox {

	[STAThread]
	static void Main() { }
	
		public string logSystem {get;set;}
		
		//[Yes]
		public bool LabelGiftBoxHomeDoorSensor(string setting_layout_file, string setting_printer_name, string setting_copies, string setting_device_name, string setting_model_name, string barcode_uid, string barcode_serial_number){
			bool r = false;
			setting_layout_file = string.Format("{0}Layout\\{1}", AppDomain.CurrentDomain.BaseDirectory, setting_layout_file);
			logSystem += string.Format("> uid barcode: {0}\n", barcode_uid);
			logSystem += string.Format("> serial number barcode: {0}\n", barcode_serial_number);
			
			//check barcode_uid format
			string pattern_uid = "^[0-9,A-F]{16}$";
			r = Regex.IsMatch(barcode_uid, pattern_uid, RegexOptions.IgnoreCase);
			logSystem += string.Format("> check uid barcode with pattern {0}: {1}\n", pattern_uid, r);
			if(!r) return false;
			
			//check barcode_serial_number format
			string pattern_sn = "^[0-9]{4}[0-9,A-Z][0-5][0-9][0-9]F[0-9,A-F]{6}$";
			r = Regex.IsMatch(barcode_serial_number, pattern_sn, RegexOptions.IgnoreCase);
			logSystem += string.Format("> check serial number barcode with pattern {0}: {1}\n", pattern_sn, r);
			if(!r) return false;
			
			//check matching barcode_uid and barcode_serial_number
			r = Automation.Parser.isMatchingUidAndSerialOneHome(barcode_uid, barcode_serial_number);
			logSystem += string.Format("> check matching uid barcode with serial number barcode: {0}\n", r);
			if(!r) return false;
			
			//printing label
			var bartender = new BartenderHelper();
			var UID = new BartenderHelper.ItemVariable() { Name = "UID", Value = barcode_uid };
			var DATE = new BartenderHelper.ItemVariable() { Name = "DATE", Value = DateTime.Now.ToString("MM/yyyy") };
			var SN = new BartenderHelper.ItemVariable() { Name = "SN", Value = barcode_serial_number };
			var MODEL = new BartenderHelper.ItemVariable() { Name = "MODEL", Value = setting_model_name };
			var DEVICE = new BartenderHelper.ItemVariable() { Name = "DEVICE", Value = setting_device_name };
			var LABLE = new BartenderHelper.ItemVariable() { Name = "LABLE", Value = "UID:" };
			
			r = bartender.printLabel(setting_layout_file, setting_printer_name, setting_copies, UID, SN, MODEL, DEVICE, LABLE, DATE);
			bartender.Dispose();
			
			logSystem += string.Format("> printing label: {0}\n", r);
			return r;
		}
		
		
		
    }
}
