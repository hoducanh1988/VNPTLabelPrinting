/*
Version=CAMIDR000U0002
BuildTime=03/12/2020 16:34
Copyright=Copyright of VNPT Technology 2020
Product=O.E.M IP CAMERA
Station=In tem 40x10 Camera Indoor
About={
Version=CAMIDR000U0001;Content=- Xây dựng phần mềm in tem 40x10 camera indoor;Date=10/11/2020;Type=Tạo mới;Person=Hồ Đức Anh
Version=CAMIDR000U0002;Content=- Update tích hợp in 2 tem 40x10 và 1 tem adapter;Date=03/12/2020;Type=Chỉnh sửa;Person=Hồ Đức Anh
}
*/

using System;
using System.Text;
using System.Net.NetworkInformation;
using System.Threading;
using System.Text.RegularExpressions;
using System.Linq;
using System.Collections.Generic;
using Automation;

namespace OEMIPCAMERA {

    public class Indoor_Label40x10 {

	[STAThread]
	static void Main() { }

		public string logSystem {get;set;}
		
		//[Yes]
		public bool printingLabel40x10_1(string setting_layout_file, string setting_printer_name, string setting_copies, string setting_product_number, string setting_factory, string setting_hardware_version, string setting_product_color, string barcode_uid){
			try {
				bool r = false;
				
				setting_layout_file = string.Format("{0}Layout\\{1}", AppDomain.CurrentDomain.BaseDirectory, setting_layout_file);
				logSystem += string.Format("> uid barcode: {0}\n", barcode_uid);
				
				//check barcode_uid format
				string pattern = "^VNT-[0-9]{6}-[A-Z]{5}$";
				r = Regex.IsMatch(barcode_uid, pattern, RegexOptions.IgnoreCase);
				logSystem += string.Format("> check uid barcode with pattern {0}: {1}\n", pattern, r);
				if(!r) return false;

				//gen serial number
				string serial_number = Automation.Converter.uidToFactorySerialNumber(barcode_uid, setting_product_number, setting_factory, setting_hardware_version, setting_product_color);
				logSystem += string.Format("> gen from uid to factory serial number: {0}\n", serial_number);
				if (serial_number == null) return false;
			
				//printing label
				var bartender = new BartenderHelper();
				var SN = new BartenderHelper.ItemVariable() { Name = "SN", Value = serial_number };
				r = bartender.printLabel(setting_layout_file, setting_printer_name, setting_copies, SN);
				bartender.Dispose();
				
				logSystem += string.Format("> printing label: {0}\n", r);
						
				return r;
			}
			catch(Exception ex) {
				logSystem += ex.ToString();
				return false;
			}
		}
			
			
		//[Yes]
		public bool printingLabel40x10_2(string setting_layout_file, string setting_printer_name, string setting_copies, string setting_product_number, string setting_factory, string setting_hardware_version, string setting_product_color, string barcode_uid){
			try {
				bool r = false;
				
				setting_layout_file = string.Format("{0}Layout\\{1}", AppDomain.CurrentDomain.BaseDirectory, setting_layout_file);
				logSystem += string.Format("> uid barcode: {0}\n", barcode_uid);
				
				//check barcode_uid format
				string pattern = "^VNT-[0-9]{6}-[A-Z]{5}$";
				r = Regex.IsMatch(barcode_uid, pattern, RegexOptions.IgnoreCase);
				logSystem += string.Format("> check uid barcode with pattern {0}: {1}\n", pattern, r);
				if(!r) return false;

				//gen serial number
				string serial_number = Automation.Converter.uidToFactorySerialNumber(barcode_uid, setting_product_number, setting_factory, setting_hardware_version, setting_product_color);
				logSystem += string.Format("> gen from uid to factory serial number: {0}\n", serial_number);
				if (serial_number == null) return false;
			
				//printing label
				var bartender = new BartenderHelper();
				var SN = new BartenderHelper.ItemVariable() { Name = "SN", Value = serial_number };
				r = bartender.printLabel(setting_layout_file, setting_printer_name, setting_copies, SN);
				bartender.Dispose();
				
				logSystem += string.Format("> printing label: {0}\n", r);
						
				return r;
			}
			catch(Exception ex) {
				logSystem += ex.ToString();
				return false;
			}
		}
		
		
		//[Yes]
		public bool printingLabelAdapter40x10(string setting_layout_file, string setting_printer_name, string setting_copies, string setting_product_number, string setting_factory, string setting_hardware_version, string setting_product_color, string barcode_uid){
			try {
				bool r = false;
				
				setting_layout_file = string.Format("{0}Layout\\{1}", AppDomain.CurrentDomain.BaseDirectory, setting_layout_file);
				logSystem += string.Format("> uid barcode: {0}\n", barcode_uid);
				
				//check barcode_uid format
				string pattern = "^VNT-[0-9]{6}-[A-Z]{5}$";
				r = Regex.IsMatch(barcode_uid, pattern, RegexOptions.IgnoreCase);
				logSystem += string.Format("> check uid barcode with pattern {0}: {1}\n", pattern, r);
				if(!r) return false;

				//gen serial number
				string serial_number = Automation.Converter.uidToFactorySerialNumber(barcode_uid, setting_product_number, setting_factory, setting_hardware_version, setting_product_color);
				logSystem += string.Format("> gen from uid to factory serial number: {0}\n", serial_number);
				if (serial_number == null) return false;
				
				//gen adapter serial
				string adp_serial = "A" + serial_number;
				
				//printing label
				var bartender = new BartenderHelper();
				var ASN = new BartenderHelper.ItemVariable() { Name = "SN", Value = adp_serial };
				r = bartender.printLabel(setting_layout_file, setting_printer_name, setting_copies, ASN);
				bartender.Dispose();
				
				logSystem += string.Format("> printing label: {0}\n", r);
						
				return r;
			}
			catch(Exception ex) {
				logSystem += ex.ToString();
				return false;
			}
			
		}
		
		
    }
}
