/*
Version=G240E2VN0U0001
BuildTime=03/02/2021 11:40
Copyright=Copyright of VNPT Technology 2021
Product=GW240H
Station=In tem đáy GW240H PLDT
About={
Version=G240E2VN0U0001;Content=- Xây dựng phần mềm in tem đáy sản phẩm GW240H PLDT;Date=03/02/2021;Type=Tạo mới;Person=Hồ Đức Anh
}
*/

using System;
using System.Text;
using System.Net.NetworkInformation;
using System.Threading;
using System.Text.RegularExpressions;
using System.Linq;
using System.Collections.Generic;
using Automation;

namespace ONT {

    public class GW240HPLDT_LabelBottom {

	[STAThread]
	static void Main() { }
	
		public string logSystem {get;set;}
		
		//[Yes]
		public bool Label_Bottom_GW240H_PLDT(string setting_layout_file, string setting_printer_name, string setting_copies, string setting_product_number, string setting_factory, string setting_hardware_version, string setting_code_serial_number, string barcode_mac_address){
			bool r = false;
			setting_layout_file = string.Format("{0}Layout\\{1}", AppDomain.CurrentDomain.BaseDirectory, setting_layout_file);
			logSystem += string.Format("> mac address: {0}\n", barcode_mac_address);
			
			//check mac_address format
			string pattern = "^[0-9,A-F]{12}$";
			r = Regex.IsMatch(barcode_mac_address, pattern, RegexOptions.IgnoreCase);
			logSystem += string.Format("> check mac address with pattern {0}: {1}\n", pattern, r);
			if(!r) return false;
			
			//gen serial number
			logSystem += string.Format("> setting_code_serial_number : {0}\n", setting_code_serial_number);
			string serial_number = Automation.Converter.macToFactorySerialNumber(barcode_mac_address, setting_product_number, setting_factory, setting_hardware_version, setting_code_serial_number);
			logSystem += string.Format("> gen from mac address to factory serial number: {0}\n", serial_number);
			if (serial_number == null) return false;
			
			//gen gpon serial number
			string gpon_serial = Automation.Converter.MacToGponSerial(barcode_mac_address);
			logSystem += string.Format("> gen from mac address to gpon serial number: {0}\n", gpon_serial);
			if (gpon_serial == null) return false;
			
			//gen ssid 2.4G
			string ssid2 = "PLDTHOMEFIBR" + barcode_mac_address.Substring(7,5);
			logSystem += string.Format("> gen from mac address to ssid 2.4G: {0}\n", ssid2);
			
			//gen ssid 5G
			string ssid5 = "PLDTHOMEFIBR5G" + barcode_mac_address.Substring(7,5);
			logSystem += string.Format("> gen from mac address to ssid 5G: {0}\n", ssid5);
			
			//gen wlan key
			string wlankey = "PLDTWIFI@" + barcode_mac_address.Substring(8,4).ToLower();
			logSystem += string.Format("> gen from mac address to wlan key: {0}\n", wlankey);
			
			//date time
			string date_time = DateTime.Now.ToString("MM/yyyy");
			logSystem += string.Format("> date time: {0}\n", date_time);
			
			//printing label
			var bartender = new BartenderHelper();
			var MAC = new BartenderHelper.ItemVariable() { Name = "MAC", Value = barcode_mac_address };
			var SN = new BartenderHelper.ItemVariable() { Name = "SN", Value = serial_number };
			var GPON = new BartenderHelper.ItemVariable() { Name = "GPON", Value = gpon_serial };
			var SSID2 = new BartenderHelper.ItemVariable() { Name = "SSID2", Value = ssid2 };
			var SSID5 = new BartenderHelper.ItemVariable() { Name = "SSID5", Value = ssid5 };
			var WLANKEY = new BartenderHelper.ItemVariable() { Name = "WLANKEY", Value = wlankey };
			var DATE = new BartenderHelper.ItemVariable() { Name = "DATE", Value = date_time };
			
			r = bartender.printLabel(setting_layout_file, setting_printer_name, setting_copies, MAC, SN, GPON, SSID2, SSID5, WLANKEY, DATE);
			bartender.Dispose();
			
			logSystem += string.Format("> printing label: {0}\n", r);
			return r;
		}
		
    }
}
